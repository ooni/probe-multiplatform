default_platform(:android)

platform :android do

  before_all do
    # Enable demo mode before running screengrab
    adb_command = "adb shell settings put global sysui_demo 1"
    Action.sh(adb_command)

    # Set demo mode properties
    demo_commands = [
      "enter",
      "battery level 100",
      "battery plug false",
      "network wifi level 4",
      "network mobile hidden",
      "clock 0800",
      "notifications remove",
      "status bar icons"
    ]

    demo_commands.each do |cmd|
      Action.sh("adb shell am broadcast -a com.android.systemui.demo -e command #{cmd}")
    end

  end

    desc "Upload the screenshots to the Google Play"
    lane :upload_screenshots do
        upload_to_play_store(
            skip_upload_apk: "true",
            skip_upload_aab: "true",
            skip_upload_changelogs: "true",
            skip_upload_images: "true",
            skip_upload_metadata: "true"
        )
    end

    desc "Capture the OONI Probe screenshots for the Google Play"
    lane :capture_screen_ooni do
        gradle(task: "clean copyBrandingToCommonResources assembleFullDebug assembleFullDebugAndroidTest -Porganization=ooni")
        capture_android_screenshots(
            app_package_name: 'org.openobservatory.ooniprobe.dev',
            use_timestamp_suffix: false,
            locales: ["en-US","ar", "ca", "de", "el", "es", "fa", "fr", "hi", "id", "is", "it", "my", "nl", "pt-BR", "ro", "ru", "sk", "sq", "sw", "th", "tr", "vi", "zh-CN", "zh-TW"],
        )
    end

    desc "Capture the DW screenshots for the Google Play"
    lane :capture_screen_dw do
        gradle(task: "clean copyBrandingToCommonResources assembleFullDebug assembleFullDebugAndroidTest -Porganization=dw")

        capture_android_screenshots(
            app_package_name: 'com.dw.ooniprobe.dev',
            output_directory: 'fastlane/metadata/dw/android',
            locales: ["en-US", "de", "es", "fr", "pt-BR", "ru", "tr"],
        )
    end


    desc "Publish the app to Huawei AppGallery"
    desc "#### Example:"
    desc "```\nfastlane android publish_app_gallery client_id:xxx client_secret:xxx app_id:xxx apk_path:xxx\n```"
    desc "#### Options"
    desc " * **`client_id`**: The client ID for Huawei AppGallery Connect"
    desc " * **`client_secret`**: The client secret for Huawei AppGallery Connect"
    desc " * **`app_id`**: The app ID for the application"
    desc " * **`apk_path`**: The path to the APK/AAB file"
    desc " * **`organization`**: ooni, dw (default: ooni)"
    desc ""
    lane :publish_app_gallery do |options|
        organization = options[:organization] || "ooni"
        raise "Invalid organization #{organization}" unless %w(ooni).include?(organization)

        bundle(organization: organization)

        huawei_appgallery_connect(
            client_id: options[:client_id],
            client_secret: options[:client_secret],
            app_id: options[:app_id],
            apk_path: options[:apk_path],
            delay_before_submit_for_review: 60,
            is_aab: true,
            submit_for_review: true,
        )
    end

    desc "Publish a new version of the app"
    desc "#### Example:"
    desc "```\nfastlane android publish track:alpha organization:ooni json_key:...\n```"
    desc "#### Options"
    desc " * **`track`**: internal, alpha, beta, production"
    desc " * **`organization`**: ooni, dw"
    desc " * **`json_key`**: the contents of the Google Play service account JSON"
    desc ""
    lane :publish do |options|
        organization = options[:organization] || "ooni"
        raise "Invalid organization #{organization}" unless %w(ooni dw).include?(organization)

        bundle(organization: organization)

        metadata_path = case organization
            when "ooni" then "./fastlane/metadata/android"
            when "dw" then "./fastlane/metadata/dw/android"
            end

        package_name = case organization
            when "ooni" then "org.openobservatory.ooniprobe"
            when "dw" then "com.dw.ooniprobe"
            end

        upload_to_play_store(
            package_name: package_name,
            track: options[:track],
            metadata_path: metadata_path,
            json_key_data: options[:json_key],
            skip_upload_metadata: true,
            skip_upload_changelogs: true,
            skip_upload_apk: true, # we're uploading AAB
            skip_upload_images: true,
            skip_upload_screenshots: true,
            validate_only: true,
        )
    end

    desc "Create AAB file"
    lane :bundle do |options|
        gradle(task: "copyBrandingToCommonResources bundleFullRelease -Porganization=#{options[:organization]}")
    end
end

platform :ios do
    desc "Build iOS app"
    lane :build do |options|
        organization = options[:organization] || "ooni"
        scheme = case organization
            when "ooni" then "OONIProbe"
            when "dw" then "NewsMediaScan"
            else raise "Invalid organization #{organization}"
            end

        gradle(task: "podInstall -Porganization=#{organization}")
        cocoapods(podfile: "./iosApp/Podfile")

        puts "Building #{scheme}"
        sh "cd .. && echo \"organization=#{organization}\" >> gradle.properties"
        sh "cd .. && xcodebuild -workspace iosApp/iosApp.xcworkspace -scheme '#{scheme}' -destination='name=Any iOS Device' -sdk iphoneos archive CODE_SIGNING_ALLOWED='NO' | xcpretty"
    end

    desc "Upload debug symbols to Sentry"
    lane :upload_debug_symbols do |options|
        sentry_debug_files_upload(
            auth_token: options[:auth_token],
            org_slug: options[:org_slug],
            project_slug: options[:project_slug]
        )
    end
end
