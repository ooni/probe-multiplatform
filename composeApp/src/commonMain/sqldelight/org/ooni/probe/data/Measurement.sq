CREATE TABLE Measurement(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    test_name TEXT,
    start_time INTEGER,
    runtime REAL,
    is_done INTEGER,
    is_uploaded INTEGER,
    is_failed INTEGER,
    failure_msg TEXT,
    is_upload_failed INTEGER,
    upload_failure_msg TEXT,
    is_rerun INTEGER,
    report_id TEXT,
    is_anomaly INTEGER,
    test_keys TEXT,
    url_id INTEGER,
    result_id INTEGER,
    rerun_network TEXT,
    FOREIGN KEY(`url_id`) REFERENCES Url(`id`) ON UPDATE NO ACTION ON DELETE NO ACTION,
    FOREIGN KEY(`result_id`) REFERENCES Result(`id`) ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX idx_measure_result_id ON Measurement (result_id);
CREATE INDEX idx_measure_start_time ON Measurement (start_time);

insertOrReplace:
INSERT OR REPLACE INTO Measurement (
    id,
    test_name,
    start_time,
    runtime,
    is_done,
    is_uploaded,
    is_failed,
    failure_msg,
    is_upload_failed,
    upload_failure_msg,
    is_rerun,
    report_id,
    is_anomaly,
    test_keys,
    url_id,
    result_id,
    rerun_network
) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);

deleteAll:
DELETE FROM Measurement;

deleteByResultRunId:
DELETE FROM Measurement
WHERE Measurement.result_id IN (
    SELECT Result.id FROM Result
    WHERE Result.descriptor_runId = ?
);

selectLastInsertedRowId:
SELECT last_insert_rowid();

selectAll:
SELECT * FROM Measurement;

selectByResultIdWithUrl:
SELECT * FROM Measurement
LEFT JOIN Url ON Measurement.url_id = Url.id
WHERE Measurement.result_id = ?
ORDER BY Measurement.start_time ASC;

countByResultId:
SELECT
    COUNT(*) AS total_measurements,
    SUM(CASE WHEN is_rerun = 0 AND is_done = 1 AND is_failed = 0 AND is_anomaly = 0 THEN 1 ELSE 0 END) AS ok_measurements,
    SUM(CASE WHEN is_rerun = 0 AND is_done = 1 AND is_failed = 1 THEN 1 ELSE 0 END) AS failed_measurements
FROM Measurement
WHERE result_id = ?;

selectAllNotUploaded:
SELECT * FROM Measurement
WHERE Measurement.is_done = 1
AND (Measurement.is_uploaded = 0 OR Measurement.report_id IS NULL)
AND (:filterByResultId = 0 OR Measurement.result_id = :resultId)
ORDER BY Measurement.start_time ASC;

selectByResultRunId:
SELECT * FROM Measurement
WHERE Measurement.result_id IN (
    SELECT Result.id FROM Result
    WHERE Result.descriptor_runId = ?
);
