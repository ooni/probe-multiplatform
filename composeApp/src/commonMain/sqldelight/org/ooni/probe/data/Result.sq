CREATE TABLE Result(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    descriptor_name TEXT,
    descriptor_runId TEXT,
    descriptor_revision INTEGER,
    start_time INTEGER,
    is_viewed INTEGER,
    is_done INTEGER,
    data_usage_up INTEGER,
    data_usage_down INTEGER,
    failure_msg TEXT,
    network_id INTEGER,
    task_origin TEXT DEFAULT 'ooni-run',
    FOREIGN KEY(`network_id`) REFERENCES Network(`id`) ON UPDATE NO ACTION ON DELETE NO ACTION,
    FOREIGN KEY(`descriptor_runId`, `descriptor_revision`) REFERENCES TestDescriptor(`runId`, `revision`) ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX idx_result_start_time ON Result (start_time);
CREATE INDEX idx_result_descriptor_name ON Result (descriptor_name);
CREATE INDEX idx_result_task_origin ON Result (task_origin);

insertOrReplace:
INSERT OR REPLACE INTO Result (
    id,
    descriptor_name,
    start_time,
    is_viewed,
    is_done,
    data_usage_up,
    data_usage_down,
    failure_msg,
    task_origin,
    network_id,
    descriptor_runId,
    descriptor_revision
) VALUES (?,?,?,?,?,?,?,?,?,?,?,?);

markAsViewed:
UPDATE Result SET is_viewed = 1 WHERE id = ?;

markAllAsViewed:
UPDATE Result SET is_viewed = 1
WHERE (
    :filterByDescriptors = 0 OR
    Result.descriptor_name IN :descriptorsKeys OR Result.descriptor_runId IN :descriptorsKeys
) AND (
    :filterByTaskOrigin = 0 OR Result.task_origin = :taskOrigin
) AND (
    Result.start_time >= :startFrom AND Result.start_time <= :startUntil
);

countAllNotViewed:
SELECT COUNT(*) FROM Result WHERE is_done = 1 AND is_viewed = 0 AND (failure_msg IS NULL OR EXISTS (SELECT 1 FROM Measurement WHERE Measurement.result_id = Result.id AND Measurement.is_done = 1));

markAsDone:
UPDATE Result SET is_done = 1 WHERE id = ?;

markAllAsDone:
UPDATE Result SET is_done = 1;

deleteAll:
DELETE FROM Result;

deleteByFilter:
DELETE FROM Result WHERE (
    :filterByDescriptors = 0 OR
    Result.descriptor_name IN :descriptorsKeys OR Result.descriptor_runId IN :descriptorsKeys
) AND (
    :filterByTaskOrigin = 0 OR Result.task_origin = :taskOrigin
) AND (
    Result.start_time >= :startFrom AND Result.start_time <= :startUntil
);

selectLastInsertedRowId:
SELECT last_insert_rowid();

selectAllWithNetwork:
SELECT *,
    notUploadedMeasurements == 0 AS allMeasurementsUploaded,
    uploadFailCount > 0 AS anyMeasurementUploadFailed
FROM (
    SELECT
        MAX(Result.id) AS id,
        MAX(Result.descriptor_name) AS descriptor_name,
        MAX(Result.start_time) AS start_time,
        MAX(Result.is_viewed) AS is_viewed,
        MAX(Result.is_done) AS is_done,
        MAX(Result.data_usage_up) AS data_usage_up,
        MAX(Result.data_usage_down) AS data_usage_down,
        MAX(Result.failure_msg) AS failure_msg,
        MAX(Result.task_origin) AS task_origin,
        MAX(Result.network_id) AS network_id,
        MAX(Result.descriptor_runId) AS descriptor_runId,
        MAX(Result.descriptor_revision) AS descriptor_revision,
        MAX(Network.id) AS network_id_inner,
        MAX(Network.network_name) AS network_name,
        MAX(Network.asn) AS asn,
        MAX(Network.country_code) AS country_code,
        MAX(Network.network_type) AS network_type,
        COUNT(Measurement.id) AS measurementsCount,
        SUM(
            CASE WHEN Measurement.is_done = 1
                    AND (Measurement.is_uploaded = 0 OR Measurement.report_id IS NULL)
                    AND Measurement.is_upload_failed = 1
                    THEN 1 ELSE 0 END
        ) AS uploadFailCount,
        SUM(
            CASE WHEN Measurement.is_done = 1
                      AND (Measurement.is_uploaded = 0 OR Measurement.report_id IS NULL)
                    THEN 1 ELSE 0 END
        ) AS notUploadedMeasurements,
        SUM(CASE WHEN Measurement.is_done = 1 THEN 1 ELSE 0 END) AS doneMeasurementsCount,
        SUM(CASE WHEN Measurement.is_failed = 1 THEN 1 ELSE 0 END) AS failedMeasurementsCount,
        SUM(CASE WHEN Measurement.is_anomaly = 1 THEN 1 ELSE 0 END) AS anomalyMeasurementsCount
    FROM Result
    LEFT JOIN Network ON Result.network_id = Network.id
    LEFT JOIN Measurement ON Measurement.result_id = Result.id
    WHERE (
        :filterByDescriptors = 0 OR
        Result.descriptor_name IN :descriptorsKeys OR Result.descriptor_runId IN :descriptorsKeys
    ) AND (
        :filterByTaskOrigin = 0 OR Result.task_origin = :taskOrigin
    ) AND (
        Result.start_time >= :startFrom AND Result.start_time <= :startUntil
    )
    GROUP BY Result.id
    ORDER BY Result.start_time DESC
    LIMIT :limit
);

selectByIdWithNetwork:
SELECT Result.*, Network.*
FROM Result
LEFT JOIN Network ON Result.network_id = Network.id
WHERE Result.id = ?
LIMIT 1;

selectLatest:
SELECT * FROM Result
ORDER BY start_time DESC
LIMIT 1;

selectLastDoneByDescriptor:
SELECT Result.id FROM Result
WHERE (Result.descriptor_name = ?1 OR Result.descriptor_runId = ?1) AND Result.is_done = 1
ORDER BY start_time DESC
LIMIT 1;

countMissingUpload:
SELECT COUNT(failed_measurements > 0)
FROM (
    SELECT SUM(Measurement.id) AS failed_measurements
    FROM Result
    LEFT JOIN Measurement ON Measurement.result_id = Result.id
    WHERE Measurement.is_done = 1
    AND (Measurement.is_uploaded = 0 OR Measurement.report_id IS NULL)
    AND Measurement.result_id = Result.id
    GROUP BY Result.id
);
