CREATE TABLE Result(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    test_group_name TEXT,
    start_time INTEGER,
    is_viewed INTEGER,
    is_done INTEGER,
    data_usage_up INTEGER,
    data_usage_down INTEGER,
    failure_msg TEXT,
    network_id INTEGER,
    descriptor_runId INTEGER REFERENCES TestDescriptor (`runId`),
    task_origin TEXT DEFAULT 'ooni-run',
    FOREIGN KEY(`network_id`) REFERENCES Network(`id`) ON UPDATE NO ACTION ON DELETE NO ACTION
);

insertOrReplace:
INSERT OR REPLACE INTO Result (
    id,
    test_group_name,
    start_time,
    is_viewed,
    is_done,
    data_usage_up,
    data_usage_down,
    failure_msg,
    task_origin,
    network_id,
    descriptor_runId
) VALUES (?,?,?,?,?,?,?,?,?,?, ?);

markAsViewed:
UPDATE Result SET is_viewed = 1 WHERE id = ?;

deleteAll:
DELETE FROM Result;

selectLastInsertedRowId:
SELECT last_insert_rowid();

selectAllWithNetwork:
SELECT
    Result.*,
    Network.*,
    (
        SELECT COUNT(Measurement.id) FROM Measurement
        WHERE Measurement.result_id = Result.id
    ) AS measurementsCount,
    (
        SELECT COUNT(Measurement.id) FROM Measurement
        WHERE Measurement.is_done = 1 AND (Measurement.is_uploaded = 0 OR Measurement.report_id IS NULL) AND Measurement.result_id = Result.id
    ) == 0 AS allMeasurementsUploaded
FROM Result
LEFT JOIN Network ON Result.network_id = Network.id
WHERE (:filterByDescriptor = 0 OR Result.test_group_name = :descriptorKey OR Result.descriptor_runId = :descriptorKey)
AND (:filterByTaskOrigin = 0 OR Result.task_origin = :taskOrigin)
ORDER BY Result.start_time DESC
LIMIT 100;

selectByIdWithNetwork:
SELECT Result.*, Network.*
FROM Result
LEFT JOIN Network ON Result.network_id = Network.id
WHERE Result.id = ?
LIMIT 1;

selectLatest:
SELECT * FROM Result
ORDER BY start_time DESC
LIMIT 1;

selectLatestByDescriptor:
SELECT * FROM Result
WHERE Result.test_group_name = ?1 OR Result.descriptor_runId = ?1
ORDER BY start_time DESC
LIMIT 1;

deleteByRunId:
DELETE FROM Result WHERE descriptor_runId = ?;
